# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-LBT3WJRXD_XnRIBxWDeq-DWbLBxXJR

1. import the lib
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""2. Load DataSet"""

df = pd.read_csv('/content/heart_disease_data.csv')

"""3. Analyzing Data"""

df.info()

df.shape

df.head(10)

df.tail(10)

# checking for missing values
df.isnull().sum()

df.describe()

df['target'].value_counts()

"""1 --> Having Heart Disease
0 --> Not Haveing Heart Disease

4. Split X and y
"""

x = df.drop(columns= 'target', axis =1)
y = df['target']

print(x)

print(y)

"""5. Split Train and Test Data """

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.1, stratify= y)
# stratify= y means split y evenly in train and test

print(x.shape, x_train.shape, x_test.shape)

print(y.shape, y_train.shape, y_test.shape)

"""5. Create model"""

model = LogisticRegression()

# train model using x_train, and y_train
model.fit(x_train,y_train)

"""6. Model Evaluation"""

# accuracy on train data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print("training data accuracy: ",training_data_accuracy)

# accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)

print("test data accuracy: ",test_data_accuracy)

"""7. Building System """

input_data = [64,1,0,120,246,0,0,96,1,2.2,0,1,2]

# change the input data into array

input_data_array = np.asanyarray(input_data)

# reshape numpy array as we are predicting only one value
input_data_array_reshape = input_data_array.reshape(1,-1)

prediction = model.predict(input_data_array_reshape)

print(prediction)

if prediction[0] == 0:
  print("The Person Dose not have a Heart Disease")
else:
  print("The Person have a Heart Disease")